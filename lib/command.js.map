{"version":3,"file":"command.js","sources":["../src/types/index.ts","../src/genApi.ts","../src/genTS.ts","../src/genService.ts","../src/command.ts"],"sourcesContent":["export interface SwaggerJsonTS {\n  swagger: string\n  info: SwaggerInfoTS\n  basePath: string\n  tags: ApiTagItemTS[]\n  paths: {\n    [key: string]: {\n      [key: string]: SwaggerApiTS\n    }\n  }\n  definitions: {\n    [key: string]: SchemaObjectTS\n  }\n  openapi?: string\n}\n\ninterface SwaggerInfoTS {\n  title: string\n  version: string\n  description: string\n  contact?: {  // 联系人\n    name: string\n    url: string\n    email: string\n  },\n  license?: {  // 许可证\n    name: string\n    url: string\n  }\n  termsOfService?: string  // 服务期限\n}\n\nenum SwaggerParameterInEnum {\n  path,\n  query,\n  body,\n  formData,\n  header\n}\n\nexport enum SchemaTypeEnum {\n  string,\n  number,\n  integer,\n  boolean,\n  object,\n  array,\n  null,\n  any,\n}\n\nexport interface SchemaObjectTS {\n  type: SchemaTypeEnum\n  required?: string[] // TODO: 是布尔吗\n  properties?: {\n    [key: string]: SchemaObjectTS\n  }\n  items?: SchemaObjectTS\n}\n\nexport interface SwaggerParameterTS {\n  name: string\n  type: SchemaTypeEnum\n  description: string,\n  required: boolean,\n  in: SwaggerParameterInEnum,\n  schema: {\n    type: SchemaTypeEnum\n    $ref: string\n  }\n}\n\ninterface SwaggerResponsesTS {\n  type: string\n  description: string,\n  schema: {\n    $ref: string\n  }\n}\n\nexport interface CommonParamTS {\n  name: string\n  type?: string\n  description?: string\n  required?: boolean\n  schema?: SchemaObjectTS\n  value?: string\n}\n\n\nexport interface SwaggerApiTS {\n  summary: string  // 摘要\n  description: string\n  tags: string[]\n  parameters: SwaggerParameterTS // 请求数据\n  responses: { // 响应数据\n    [key: string]: SwaggerResponsesTS\n  }\n  operationId?: string\n  deprecated?: boolean\n  consumes?: string[]\n}\n\ninterface ApiTagItemTS {\n  name: string\n  description: string\n}\n\n// 响应项\ninterface ResponseItemTS {\n  statusCode: number\n  description: string\n  data: SchemaObjectTS\n}\n\nexport interface ApiItemTS {\n  path: string\n  method: string\n  tags: string[]\n  summary: string // 摘要\n  description: string // 描述\n  requestPathParam: CommonParamTS[] // 请求路径参数\n  requestPathQuery: CommonParamTS[]  // 请求路径query\n  requestHeader: CommonParamTS[] // 请求头\n  requestBodyType: string // jdon form row\n  requestBody: CommonParamTS[] | string | SchemaObjectTS\n  responseList: ResponseItemTS[]\n}\n\nexport interface ApiInfoTS {\n  swagger: string\n  info: SwaggerInfoTS\n  basePath: string\n  tags: ApiTagItemTS[]\n  apiList: ApiItemTS[],\n  definitions: {\n    [key: string]: SchemaObjectTS\n  }\n  paths: {\n    [key: string]: {\n      [key: string]: SwaggerApiTS\n    }\n  }\n}\n\nexport interface GenCodeResultTS {\n  apiInfo: ApiInfoTS\n  ts?: string\n  service?: string\n}\n\nexport const enum genListEnum {\n  api,\n  ts,\n  service\n}\n\nexport interface OptionsTS {\n  // 自定义 ts interface 名称\n  setTSInterfaceName?: () => string\n\n  // 自定义 service 模板\n  serviceTemplate?: string\n\n  // 自定义 service 模板变量\n  setServiceTemplateVariable?: () => ({ [key: string]: any })\n}\n\n\nexport enum JsonTypeEnum {\n  json,\n  jsonSchema\n}\n","import swagger from 'swagger-client';\nimport { ApiInfoTS, SwaggerJsonTS, CommonParamTS, SwaggerApiTS, SchemaObjectTS, SwaggerParameterTS } from './types/index'\n\n\n// 响应列表\nconst getResponseList = (api: SwaggerApiTS) => {\n  const responseList = [];\n  for (const [statusCode, val] of Object.entries(api.responses)) {\n    responseList.push({\n      statusCode,\n      type: val.type,\n      description: val.description,\n      ...(val.schema ? val.schema : {})\n    })\n  }\n\n  return responseList;\n}\n\n// 获取请求信息\nconst getRequestInfo = (api: SwaggerApiTS) => {\n  const requestHeader: CommonParamTS[] = [];\n  const requestPathParam: CommonParamTS[] = []; // 请求路径参数\n  const requestPathQuery: CommonParamTS[] = []; // 请求路径query\n  let requestBody: CommonParamTS[] | SchemaObjectTS; // 请求体\n  let requestBodyType = 'json';\n\n\n  if (Array.isArray(api.consumes)) {\n    requestHeader.push({\n      name: \"Content-Type\",\n      required: true,\n      value: api.consumes[0]\n    })\n\n    if (\n      api.consumes.includes(\"application/x-www-form-urlencoded\") ||\n      api.consumes.includes(\"multipart/form-data\")\n    ) {\n      requestBodyType = \"form\";\n    } else if (api.consumes.includes(\"application/json\")) {\n      requestBodyType = \"json\";\n    }\n  }\n\n  if (Array.isArray(api.parameters)) {\n    api.parameters.forEach(item => {\n      if (item === \"object\" && item.$ref) {\n        item = simpleJsonPathParse(item.$ref, {\n          parameters: api.parameters\n        });\n      }\n\n      // 必填 非必填\n      const defaultParam: CommonParamTS = {\n        name: item.name,\n        required: item.required || false,\n        description: item.description\n      };\n\n      switch (item.in) {\n        case \"path\":\n          requestPathParam.push(defaultParam);\n          break;\n        case \"query\":\n          requestPathQuery.push(defaultParam);\n          break;\n        case \"body\":\n          requestBody = {\n            name: item.name,\n            required: item.required,\n            description: item.description,\n            ...(item.schema ? item.schema : {})\n          }\n          break;\n        case \"formData\":\n          defaultParam.type = item.type || \"text\";\n          if (!Array.isArray(requestBody)) {\n            requestBody = [];\n          }\n          requestBody.push(defaultParam);\n          break;\n        case \"header\":\n          requestHeader.push(defaultParam);\n          break;\n      }\n    });\n  }\n\n  //处理参数\n  function simpleJsonPathParse(key: string, json: {parameters: SwaggerParameterTS}) {\n    if (\n      !key ||\n      typeof key !== \"string\" ||\n      key.indexOf(\"#/\") !== 0 ||\n      key.length <= 2\n    ) {\n      return null;\n    }\n    let keys: string[] = key.substr(2).split(\"/\");\n    keys = keys.filter(item => {\n      return item;\n    });\n    for (let i = 0, l = keys.length; i < l; i++) {\n      try {\n        // @ts-expect-error\n        json = json[keys[i]];\n      } catch (e) {\n        // @ts-expect-error\n        json = \"\";\n        break;\n      }\n    }\n    return json;\n  }\n\n  // @ts-expect-error\n  return { requestHeader, requestPathParam, requestPathQuery, requestBody, requestBodyType };\n}\n\n\n\n\n/**\n * 解析 swagger，生成 语义化json\n * @param {object | string} data\n * @return {} \n */\n export const genApi = async (data: SwaggerJsonTS): Promise<ApiInfoTS>  => {\n  try {\n    if (typeof data === 'string') {\n      // data = data.trim();\n      // // 嗅探, json\n      // if (data[0] === '{' && data.substr(-1, 1) === '}') {\n      //   data = json_parse(data);\n      // // guess yaml\n      // } else {\n      //   data = jsYaml.safeLoad(data);\n      // }\n    }\n\n    // 转换成 swagger 2.0\n    // if (data.openapi === \"3.0.0\") {\n    //   data = openapi2swagger(data);\n    // }\n\n    // 解析swagger: 给schema赋值\n    const dataHandle = await swagger({\n      spec: data\n    });\n    \n    data = dataHandle.spec;\n\n    // 拼装 apiList\n    const apiList = [];\n\n    for (const [path, apis] of Object.entries(data.paths)) {\n      for (const [method, item] of Object.entries(apis)) {\n        const { requestHeader, requestPathParam, requestPathQuery, requestBody, requestBodyType } = getRequestInfo(item);\n  \n        apiList.push({\n          path,\n          method,\n          tags: item.tags,\n          summary: item.summary, // 摘要\n          description: item.description, // 描述\n          requestHeader, // 请求头\n          requestBodyType, // 请求体类型\n          requestPathParam, // 请求路径param\n          requestPathQuery,  // 请求路径query\n          requestBody,  // 请求体\n          responseList: getResponseList(item)\n        })\n      }\n    }\n    return {\n      swagger: data.swagger,\n      info: data.info || {},\n      basePath: data.basePath || '',\n      tags: data.tags || [],\n      // @ts-expect-error\n      apiList,\n      paths: data.paths,\n      definitions: data.definitions\n    };\n  } catch (e) {\n    console.error(e);\n    return {\n      swagger: data.swagger,\n      info: data.info,\n      basePath: data.basePath,\n      tags: data.tags,\n      apiList: [],\n      paths: data.paths,\n      definitions: data.definitions\n    };\n  }\n}\n\n\n\n\n\n","import { ApiInfoTS, OptionsTS, JsonTypeEnum } from './types';\n\nexport const genTS = (apiInfo: ApiInfoTS, options: OptionsTS): string => {\n  console.log('---genService', apiInfo, options);\n\n  return ''\n}\n","import { ApiInfoTS, OptionsTS } from './types'\n\nexport const genService = (apiInfo: ApiInfoTS, options: OptionsTS): string => {\n  console.log('---genService', apiInfo, options);\n\n  return ''\n}\n","#!/usr/bin/env node\nimport { genListEnum, SwaggerJsonTS, GenCodeResultTS, OptionsTS } from './types/index';\nimport { genApi } from './genApi';\nimport { genTS } from './genTS';\nimport { genService } from './genService';\n\n\n/**\n * 生成代码\n *\n * @param {SwaggerJsonTS} swagger 接收 json、ymal 格式的数据\n * @param {genListEnum} genList\n * @return {*}  {GenCodeResultTS}\n */\nexport const swaggerGenCode = async (swagger: SwaggerJsonTS, genList: genListEnum[] = [], options: OptionsTS = {}): Promise<GenCodeResultTS> => {\n  let ts,service;\n\n  const apiInfo = await genApi(swagger);\n\n  if (genList.includes(genListEnum.ts)) {\n    ts = genTS(apiInfo, options);\n  }\n\n  if (genList.includes(genListEnum.service)) {\n    service = genService(apiInfo, options);\n  }\n\n  const result = {\n    apiInfo\n  }\n\n  return Object.assign(result, ts ? {ts} : {}, service ? {service}: {});\n}\n"],"names":["SwaggerParameterInEnum","SchemaTypeEnum","genListEnum","JsonTypeEnum","getResponseList","api","responseList","_a","Object","entries","responses","_i","_b","statusCode","val","push","type","description","schema","getRequestInfo","requestBody","requestHeader","requestPathParam","requestPathQuery","requestBodyType","Array","isArray","consumes","name","required","value","includes","parameters","forEach","item","defaultParam","$ref","key","json","indexOf","length","keys","substr","split","filter","i","l","e","simpleJsonPathParse","in","genApi","data","Promise","swagger","spec","dataHandle","_g","apiList","paths","path","apis","_d","_c","_e","method","_f","tags","summary","info","basePath","definitions","console","error","e_1","genTS","apiInfo","options","log","genService","swaggerGenCode","genList","ts","service","result","assign"],"mappings":"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"}